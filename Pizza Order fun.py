# -*- coding: utf-8 -*-
"""Williams Anosike DATA 690 Summer Project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10WKcxbIUtw0yCpI2Q9WkLqdV0X-eHRxd
"""

class Pizza():

  pizz_menu = {}

  def __init__(self, pizzaname, toppings, price, crust_type):
    self.pizzaname = pizzaname
    self.toppings = toppings
    self.crust_type = crust_type
    
    if len(toppings) >= 5 and len(toppings) < 10:
      self.price = price + 5
    elif len(toppings) < 5:
      self.price = price + len(toppings)
    elif len(toppings) > 10:
      self.price = price + 10

  def add_pizz(self, pizzaname):

      if pizzaname not in Pizza.pizz_menu:
        Pizza.pizz_menu[pizzaname] = [self.toppings, self.price, self.crust_type]
      else:
        print("This Pizza is already in the menu!")
    
    
  def add_toppings(self, to_add):
    for i in to_add:
      self.toppings.append(i)
    
  def update_price(self, price, toppings):
    if len(toppings) >= 5 and len(toppings) < 10:
      self.price = self.price + 5
    elif len(toppings) > 10:
      self.price = self.price + 10      
    return self.price

import datetime

class PizzaOrder(Pizza):
  
  order_history = {}
  order_num = 1

  def __init__(self, customer, order_date, piz_store, promo_code, piz_order):
    self.customer = customer
    self.order_date = order_date
    self.piz_store = piz_store
    self.promo_code = promo_code
    self.piz_order = piz_order
    self.total_price = []
    self.order_status = "ORDER_CREATED"

  
  def add_to_order(self, order):
    for i in order:
      self.piz_order.append(order)

  def get_prices(self):
    for i in self.piz_order:
      if i in Pizza.pizz_menu:
        self.total_price.append(Pizza.pizz_menu[i][1])
      else:
        pass
    f = sum(self.total_price)
    self.order_price = f
    if self.promo_code == 5:
      self.order_price = self.order_price * 0.95
    elif self.promo_code == 10:
      self.order_price = self.order_price * 0.90
    elif self.promo_code == 15:
      self.order_price = self.order_price * 0.85
    elif self.promo_code == 20:
      self.order_price = self.order_price * 0.80      
    print("Sum of order is: ", self.order_price)
    self.order_status = "ORDER_READY"
    print("Order is ready...")
    e = input("Deliver order? Y/N: ")
    if e == "Y":
      self.order_status = "ORDER_ON_DELIVERY"
    print("Order to be delivered...")

  def __del__(self):
    print("Order Deleted!")
    if self.customer in order_history:
      del PizzaOrder.order_history[self.customer]

    self.order_status = "ORDER_CANCELED"

  def clear_order(self):
    self.piz_order = []

  def complete_order(self):
    s = input("Complete Order? Y/N: ")
    if s == "Y":
      PizzaOrder.order_history[PizzaOrder.order_num] = [self.customer, self.order_date, self.piz_store, self.piz_order, self.order_price]
      PizzaOrder.order_num += 1
      self.order_status = "ORDER_COMPLETE"

  def search_order_date(date):
    for i in PizzaOrder.order_history:
      if PizzaOrder.order_history[i][1] == date:
        print(PizzaOrder.order_history[i])
      
  def search_customer(customer):
    for i in PizzaOrder.order_history:
      if PizzaOrder.order_history[i][0] == customer:
        print(PizzaOrder.order_history[i])    

  def order_before_date(date):
    for i in PizzaOrder.order_history:
      if PizzaOrder.order_history[i][1] < date:
        print(PizzaOrder.order_history[i])
  
  def order_after_date(date):
    for i in PizzaOrder.order_history:
      if PizzaOrder.order_history[i][1] > date:
        print(PizzaOrder.order_history[i])

class Store():

  store_dict = {}

  def __init__(self, address, zipcode, phone_num):
    self.address = address
    self.zipcode = zipcode
    self.phone_num = phone_num
    self.emp_list = []
    if self.zipcode not in Store.store_dict:
      Store.store_dict[self.zipcode] = [self.address, self.emp_list, self.phone_num]
    else:
      print("There is a store at this zipcode already!")

  def add_emp(self, name):
    if self.zipcode in Store.store_dict:
      Store.store_dict[self.zipcode][1].append(name)

  def monthly_sales(self, month):
    sales = 0
    for i in PizzaOrder.order_history:
      if PizzaOrder.order_history[i][1].month == month and PizzaOrder.order_history[i][2] == self.zipcode:
        sales += PizzaOrder.order_history[i][4]
    print("The total sales for the ",month," month of the store located at zipcode, ", str(self.zipcode) ," is: ", str(sales))

class Employee():

  def __init__(self, name):
    self.name = name

class Customer(Store):
    """The Customer who orders a pizza."""

    def __init__(self, cust_name, phone, zipcode, mileage):
        self.cust_name = cust_name
        self.phone = str(phone).strip()
        self.zipcode = zipcode
        self.mileage = mileage


    def __repr__(self):
        return "Name: {}\nPhone: {}\nZipCode: {}\nMileage: {}".format(
            self.cust_name,
            self.phone,
            self.zipcode,
            self.mileage,
        )
    
    def find_store(self):
      for i in Store.store_dict:
        if i == self.zipcode:
          print("Found a store at your location!")
          print("This store's address is: ", Store.store_dict[i][0])

"""Creating a pizza and generating its price based on the number of toppings and the crust."""

pineapple_pizza = Pizza("Pineapple Pizza", ["a","b","c","d"], 25, "thin")

pineapple_pizza.price

pineapple_pizza.add_toppings(["h","i","j","k","l","m","n"])

pineapple_pizza.toppings

"""Updating the price after adding more toppings!"""

pineapple_pizza.update_price(pineapple_pizza.price, pineapple_pizza.toppings)
pineapple_pizza.price

"""Adding the Pizza to our dictionary (menu if were talking about food), where the name serves as its unique identifier."""

pineapple_pizza.add_pizz("Pineapple Pizza w/ 10 toppings")

"""Tells user if pizza is already on the menu and therefore does not add it again."""

pineapple_pizza.add_pizz("Pineapple Pizza w/ 10 toppings")

Pizza.pizz_menu

pepperoni_pizza = Pizza("Pepperoni Pizza", ["a", "b","c"], 14, "thick")

pepperoni_pizza.price

pepperoni_pizza.add_pizz("Pepperoni Pizza w/ 3 toppings")

Pizza.pizz_menu

"""Creating a dummy order."""

first_order = PizzaOrder("Williams Anosike", datetime.datetime(2020,1,1), 20721, 5, ["Pepperoni Pizza w/ 3 toppings","Pineapple Pizza w/ 10 toppings" ])

"""Fetching the price of the order based on the pizzas in it.
Promo code applied here was 5% off.
"""

first_order.get_prices()

first_order.order_status

"""Added user prompts, which based on their responses changes the order status."""

first_order.complete_order()

PizzaOrder.order_history

second_order = PizzaOrder("Peace Anosike", datetime.datetime(2020,2,1), 20721, None, ["Pepperoni Pizza w/ 3 toppings"])

second_order.get_prices()

second_order.complete_order()

PizzaOrder.order_history

"""Example of searching PizzaOrder by Date."""

PizzaOrder.search_order_date(datetime.datetime(2020,2,1))

"""Example of searching PizzaOrder by Customer."""

PizzaOrder.search_customer("Williams Anosike")

"""Example of showing orders before Date, 02/01/2020."""

PizzaOrder.order_before_date(datetime.datetime(2020,2,1))

"""Example of showing orders after Date, 01/01/2020."""

PizzaOrder.order_after_date(datetime.datetime(2020,1,1))

"""Creating dummy Employees and stores to check if code is working correctly."""

emp1 = Employee("Williams Anosike")
emp2 = Employee("Lilian Anosike")
emp3 = Employee("Peace Anosike")

store1 = Store("10112 Bald Hill Rd", 20721, 2403558804)
store2 = Store("1000 Hilltop Circle", 21250, 2403449800)
store3 = Store("12020 Beltsville Drive", 20705, 3015269137)

"""Outputs a message and tells user if there is store at that zipcode already. Will not add store to store dictionary where all information is housed."""

store4 = Store("Blah Blah", 20721, 224)

"""Adding Employees to stores."""

store1.add_emp(emp1.name)
store1.add_emp(emp2.name)
store2.add_emp(emp3.name)

Store.store_dict

"""Generates total sales for the month of January!"""

store1.monthly_sales(1)

"""Generates total sales for the month of February!"""

store1.monthly_sales(2)

cust1 = Customer("Professor", 323232, 21250, 14)

"""Finding a store in the same zipcode of given customer."""

cust1.find_store()

"""Sorting the pizza orders by order date."""

sorted_dict = dict(sorted(PizzaOrder.order_history.items(), key=lambda item: item[1]))

sorted_dict

"""The Big O Notation for the searching algortihms used above is O(1). 
The Big O Notation for the sorting algortihm used above is O(1). I simply used the sorted method to carry it out.

"""